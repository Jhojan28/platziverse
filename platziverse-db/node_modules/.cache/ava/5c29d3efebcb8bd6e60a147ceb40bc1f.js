'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const proxyquire = require('proxyquire');
const sinon = require('sinon');
const test = require('ava');
const metricFixtures = require('./fixtures/metric');
const agentFixtures = require('./fixtures/agent');

let uuid = 'yyy-yyy-yyy';
let MetricStub = null;
let sandbox = null;
let db = null;
let type = 'app';
let AgentStub = {
  hasMany: sinon.spy()
};
let newMetric = {
  type: 'CPU',
  value: '23%'
};
let config = {
  logging: function () {}
};
let uuidArgs = {
  where: {
    uuid
  }
};
let metricUuiArgs = {
  attributes: ['type'],
  group: ['type'],
  include: [{
    model: AgentStub,
    attributes: [],
    where: {
      uuid
    }
  }],
  raw: true
};
let typeUuidArgs = {
  attributes: ['id', 'type', 'value', 'createdAt'],
  where: {
    type
  },
  limit: 20,
  order: [['createdAt', 'DESC']],
  include: {
    model: AgentStub,
    attributes: [],
    where: {
      uuid
    }
  },
  raw: true
};

test.beforeEach(async () => {
  sandbox = sinon.sandbox.create();
  MetricStub = {
    belongsTo: sandbox.spy()

    // Metric create Stub
  };MetricStub.create = sandbox.stub();
  MetricStub.create.withArgs(uuid, newMetric).returns(Promise.resolve(newMetric));
  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({
    toJSON() {
      return newMetric;
    }
  }));

  // Metric findByAgentUuid Stub
  MetricStub.findByAgentUuid = sandbox.stub();
  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metricFixtures.findUuid(uuid)));

  // Metric findByTypeAgentUuid Stub
  MetricStub.findByTypeAgentUuid = sandbox.stub();
  MetricStub.findByTypeAgentUuid.withArgs(type, uuid).returns(Promise.resolve(metricFixtures.findTypeAgentUuid(type, uuid)));

  // Metric findAll Stub
  MetricStub.findAll = sandbox.stub();
  MetricStub.findAll.withArgs(metricUuiArgs).returns(Promise.resolve(metricFixtures.findUuid(uuid)));
  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.findTypeAgentUuid(type, uuid)));
  // Agent findOne Stub
  AgentStub.findOne = sandbox.stub();
  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.single));

  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sinon.sandbox.restore();
});

test('metric', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').Metric, 'arguments/0'), {
    content: 't.truthy(db.Metric, \'metric Services should exist\')',
    filepath: 'tests/metric-test.js',
    line: 97,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Metric","range":[12,18]},"computed":false,"range":[9,18]},{"type":"StringLiteral","value":"metric Services should exist","range":[20,50]}],"range":[0,51]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Metric","range":[12,18]},{"type":{"label":","},"range":[18,19]},{"type":{"label":"string"},"value":"metric Services should exist","range":[20,50]},{"type":{"label":")"},"range":[50,51]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'metric Services should exist');
});

test.serial('setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(AgentStub, 'arguments/0/object/object').hasMany, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.called, \'AgentModel.hasMany was executed\')',
    filepath: 'tests/metric-test.js',
    line: 101,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"AgentModel.hasMany was executed","range":[33,66]}],"range":[0,67]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"AgentModel.hasMany was executed","range":[33,66]},{"type":{"label":")"},"range":[66,67]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'AgentModel.hasMany was executed');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(AgentStub, 'arguments/0/callee/object/object').hasMany, 'arguments/0/callee/object').calledWith(_rec3._capt(MetricStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.calledWith(MetricStub), \'Argument should be the MetricModel\')',
    filepath: 'tests/metric-test.js',
    line: 102,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"MetricStub","range":[36,46]}],"range":[7,47]},{"type":"StringLiteral","value":"Argument should be the MetricModel","range":[49,85]}],"range":[0,86]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"MetricStub","range":[36,46]},{"type":{"label":")"},"range":[46,47]},{"type":{"label":","},"range":[47,48]},{"type":{"label":"string"},"value":"Argument should be the MetricModel","range":[49,85]},{"type":{"label":")"},"range":[85,86]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the MetricModel');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.called, \'MetricModel.belongsTo was executed\')',
    filepath: 'tests/metric-test.js',
    line: 103,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"called","range":[28,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"MetricModel.belongsTo was executed","range":[36,72]}],"range":[0,73]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"called","range":[28,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"MetricModel.belongsTo was executed","range":[36,72]},{"type":{"label":")"},"range":[72,73]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'MetricModel.belongsTo was executed');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec5._capt(AgentStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.calledWith(AgentStub), \'Argument should be the AgentModel\')',
    filepath: 'tests/metric-test.js',
    line: 104,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"calledWith","range":[28,38]},"computed":false,"range":[7,38]},"arguments":[{"type":"Identifier","name":"AgentStub","range":[39,48]}],"range":[7,49]},{"type":"StringLiteral","value":"Argument should be the AgentModel","range":[51,86]}],"range":[0,87]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"calledWith","range":[28,38]},{"type":{"label":"("},"range":[38,39]},{"type":{"label":"name"},"value":"AgentStub","range":[39,48]},{"type":{"label":")"},"range":[48,49]},{"type":{"label":","},"range":[49,50]},{"type":{"label":"string"},"value":"Argument should be the AgentModel","range":[51,86]},{"type":{"label":")"},"range":[86,87]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the AgentModel');
});

test.serial('Metric#create', async t => {
  var _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  let metric = await db.Metric.create(uuid, newMetric);

  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(MetricStub, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.create.called, \'create should be called at model\')',
    filepath: 'tests/metric-test.js',
    line: 110,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"create","range":[18,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"create should be called at model","range":[33,67]}],"range":[0,68]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"create","range":[18,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"create should be called at model","range":[33,67]},{"type":{"label":")"},"range":[67,68]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called at model');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(MetricStub, 'arguments/0/object/object').create, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(MetricStub.create.calledOnce, \'create Should be called Once\')',
    filepath: 'tests/metric-test.js',
    line: 111,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"create","range":[18,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"create Should be called Once","range":[37,67]}],"range":[0,68]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"create","range":[18,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"create Should be called Once","range":[37,67]},{"type":{"label":")"},"range":[67,68]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create Should be called Once');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(MetricStub, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec8._capt(newMetric, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.create.calledWith(newMetric), \'create should be called arguments\')',
    filepath: 'tests/metric-test.js',
    line: 112,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"create","range":[18,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"newMetric","range":[36,45]}],"range":[7,46]},{"type":"StringLiteral","value":"create should be called arguments","range":[48,83]}],"range":[0,84]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"create","range":[18,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"newMetric","range":[36,45]},{"type":{"label":")"},"range":[45,46]},{"type":{"label":","},"range":[46,47]},{"type":{"label":"string"},"value":"create should be called arguments","range":[48,83]},{"type":{"label":")"},"range":[83,84]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called arguments');

  t.deepEqual(metric, newMetric, 'metric should be the same');
});

test.serial('Metric#findByAgentUuid', async t => {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder();

  let metrics = await db.Metric.findByAgentUuid(uuid);

  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.findAll.called, \'findAll should be called\')',
    filepath: 'tests/metric-test.js',
    line: 120,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"called","range":[26,32]},"computed":false,"range":[7,32]},{"type":"StringLiteral","value":"findAll should be called","range":[34,60]}],"range":[0,61]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"called","range":[26,32]},{"type":{"label":","},"range":[32,33]},{"type":{"label":"string"},"value":"findAll should be called","range":[34,60]},{"type":{"label":")"},"range":[60,61]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(MetricStub.findAll.calledOnce, \'findAll should be called Once\')',
    filepath: 'tests/metric-test.js',
    line: 121,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledOnce","range":[26,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"findAll should be called Once","range":[38,69]}],"range":[0,70]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledOnce","range":[26,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"findAll should be called Once","range":[38,69]},{"type":{"label":")"},"range":[69,70]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called Once');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(MetricStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec11._capt(metricUuiArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.findAll.calledWith(metricUuiArgs), \'findAll should be with args\')',
    filepath: 'tests/metric-test.js',
    line: 122,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledWith","range":[26,36]},"computed":false,"range":[7,36]},"arguments":[{"type":"Identifier","name":"metricUuiArgs","range":[37,50]}],"range":[7,51]},{"type":"StringLiteral","value":"findAll should be with args","range":[53,82]}],"range":[0,83]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledWith","range":[26,36]},{"type":{"label":"("},"range":[36,37]},{"type":{"label":"name"},"value":"metricUuiArgs","range":[37,50]},{"type":{"label":")"},"range":[50,51]},{"type":{"label":","},"range":[51,52]},{"type":{"label":"string"},"value":"findAll should be with args","range":[53,82]},{"type":{"label":")"},"range":[82,83]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be with args');

  t.is(metrics.length, metricFixtures.findUuid(uuid).length, 'should be the amount');
  t.deepEqual(metrics, metricFixtures.findUuid(uuid), 'metrics should be the same');
});

test.serial('Metric#findByTypeAgentUuid', async t => {
  var _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder();

  let metrics = await db.Metric.findByTypeAgentUuid(type, uuid);

  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.findAll.called, \'findAll should be called\')',
    filepath: 'tests/metric-test.js',
    line: 131,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"called","range":[26,32]},"computed":false,"range":[7,32]},{"type":"StringLiteral","value":"findAll should be called","range":[34,60]}],"range":[0,61]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"called","range":[26,32]},{"type":{"label":","},"range":[32,33]},{"type":{"label":"string"},"value":"findAll should be called","range":[34,60]},{"type":{"label":")"},"range":[60,61]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(MetricStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(MetricStub.findAll.calledOnce, \'findAll should be called Once\')',
    filepath: 'tests/metric-test.js',
    line: 132,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledOnce","range":[26,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"findAll should be called Once","range":[38,69]}],"range":[0,70]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledOnce","range":[26,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"findAll should be called Once","range":[38,69]},{"type":{"label":")"},"range":[69,70]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called Once');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(MetricStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec14._capt(typeUuidArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.findAll.calledWith(typeUuidArgs), \'findAll should be with args\')',
    filepath: 'tests/metric-test.js',
    line: 133,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findAll","range":[18,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledWith","range":[26,36]},"computed":false,"range":[7,36]},"arguments":[{"type":"Identifier","name":"typeUuidArgs","range":[37,49]}],"range":[7,50]},{"type":"StringLiteral","value":"findAll should be with args","range":[52,81]}],"range":[0,82]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findAll","range":[18,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledWith","range":[26,36]},{"type":{"label":"("},"range":[36,37]},{"type":{"label":"name"},"value":"typeUuidArgs","range":[37,49]},{"type":{"label":")"},"range":[49,50]},{"type":{"label":","},"range":[50,51]},{"type":{"label":"string"},"value":"findAll should be with args","range":[52,81]},{"type":{"label":")"},"range":[81,82]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be with args');

  t.is(metrics.length, metricFixtures.findTypeAgentUuid(type, uuid).length, 'should be with amount');

  t.deepEqual(metrics, metricFixtures.findTypeAgentUuid(type, uuid), 'metrics should be the same');
});
//# sourceMappingURL=../node_modules/.cache/ava/5c29d3efebcb8bd6e60a147ceb40bc1f.js.map