{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","byId","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,aAAS,YAAY,CAAE;AADZ,CAAb;AAGA,IAAIC,aAAa;AACbC,eAAWN,MAAMO,GAAN;AADE,CAAjB;AAGA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AACxBD,cAAUd,MAAMc,OAAN,CAAcE,MAAd,EAAV;AACAJ,gBAAY;AACRK,iBAASH,QAAQP,GAAR;AADD,KAAZ;AAGF,UAAMW,gBAAgBjB,WAAW,KAAX,EAAmB;AACrC,0BAAkB,MAAKW,SADc;AAErC,2BAAmB,MAAKP;AAFa,KAAnB,CAAtB;AAIAQ,SAAK,MAAMK,cAAcf,MAAd,CAAX;AACD,CAVD;;AAYAL,KAAKqB,SAAL,CAAe,MAAI;AACfL,eAAWd,MAAMc,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAtB,KAAK,cAAL,EAAqBuB,KAAK;AAAA;;AACxBA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACD,CAFD;;AAIAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAG;AAAA;AAAA;AAAA;AAAA;;AACpBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC;AACAL,MAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,+BAAjD;AACAgB,MAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,8BAAnD;AACH,CALD;;AAOAd,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAS;AACnC,QAAIO,QAAQ,MAAMf,GAAGU,KAAH,CAASM,IAAT,CAAclB,EAAd,CAAlB;;AAEAU,MAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc2B,IAAd,CAAmBlB,EAAnB,CAAnB,EAA2C,oBAA3C;AACH,CAJD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n  const setupDatabase = proxyquire('../', Â {\n      './models/agent': ()=> AgentStub,\n      './models/metric': ()=> MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(()=>{\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t=>{\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be MetricStub')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be AgentStub')\n})\n\ntest.serial('Agent#findById', async t=>{\n    let agent = await db.Agent.byId(id)\n\n    t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})"]}