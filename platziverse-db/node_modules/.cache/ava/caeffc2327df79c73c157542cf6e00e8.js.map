{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    //Model findById\n\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n  const setupDatabase = proxyquire('../', Â {\n      './models/agent': ()=> AgentStub,\n      './models/metric': ()=> MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(()=>{\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t=>{\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be MetricStub')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be AgentStub')\n})\n\ntest.serial('Agent#findById', async t=>{\n    let agent = await db.Agent.findById(id)\n\n    t.true(AgentStub.findById.called, 'FindById should be called on model')\n    t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n    t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n    t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})"]}