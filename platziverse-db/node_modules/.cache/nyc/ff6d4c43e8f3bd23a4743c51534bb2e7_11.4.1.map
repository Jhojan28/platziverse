{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","update","findById","byId","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\nlet uuidArgs = {\n    where: {\n        uuid\n    }\n}\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    //model findOne\n    AgentStub.findOne = sandbox.stub()\n    AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n\n    //model update\n    AgentStub.update = sandbox.stub()\n    AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n    //Model findById\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n  const setupDatabase = proxyquire('../', Â {\n      './models/agent': ()=> AgentStub,\n      './models/metric': ()=> MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(()=>{\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t=>{\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be MetricStub')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be AgentStub')\n})\n\ntest.serial('Agent#findById', async t=>{\n    let agent = await db.Agent.findById(id)\n\n    t.true(AgentStub.findById.called, 'FindById should be called on model')\n    t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n    t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n    t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})\n\ntest.serial('Agent#createOrUpdate - exists', async t=>{\n    let agent = await db.Agent.createOrUpdate(single)\n\n    t.true(AgentStub.findOne.called, 'FindOne should be called on model')\n    t.true(AgentStub.findOne.calledTwice, 'FindOne should be called twice')\n    t.true(AgentStub.update.calledOnce, \"Update should be called once\")\n    t.deepEqual(agent, single, 'Agent should be the same')\n})"]}