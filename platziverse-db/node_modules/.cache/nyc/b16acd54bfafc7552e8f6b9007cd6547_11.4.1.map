{"version":3,"sources":["metric-test.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixtures","config","login","AgentStub","hasMany","spy","uuid","type","sandbox","MetricStub","db","uuidArgs","where","newMetric","id","value","createAt","Date","agentUuidArgs","typeAgentUuidArgs","attributes","limit","order","include","model","raw","beforeEach","create","belongsTo","findOne","stub","withArgs","returns","Promise","resolve","byUuid","toJSON","findAll","all","findByAgentUuid","findByTypeAgentUuid","setupDatabase","afterEach","restore","t","truthy","Metric","serial","metric","true","called","calledOnce","calledWith","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,iBAAiBH,QAAQ,mBAAR,CAAvB;AACA,MAAMI,gBAAgBJ,QAAQ,kBAAR,CAAtB;;AAEA,IAAIK,SAAS;AACXC,SAAO,YAAY,CAAE;AADV,CAAb;;AAIA,IAAIC,YAAY;AACdC,WAASP,MAAMQ,GAAN;AADK,CAAhB;;AAIA,IAAIC,OAAO,aAAX;AACA,IAAIC,OAAO,KAAX;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,KAAK,IAAT;;AAEA,IAAIC,WAAW,EAAEC,OAAO,EAAEN,IAAF,EAAT,EAAf;;AAEA,IAAIO,YAAY;AACdC,MAAI,CADU;AAEdP,QAAM,KAFQ;AAGdQ,SAAO,MAHO;AAIdC,YAAU,IAAIC,IAAJ;AAJI,CAAhB;;AAOA,IAAIC,gBAAgB,EAApB;;AAIA,IAAIC,oBAAoB;AACtBC,cAAY,CAAE,IAAF,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,WAAzB,CADU;AAEtBR,SAAO;AACLL;AADK,GAFe;AAKtBc,SAAO,EALe;AAMtBC,SAAO,CAAC,CAAE,WAAF,EAAe,MAAf,CAAD,CANe;AAOtBC,WAAS,CAAC;AACRH,gBAAY,EADJ;AAERI,WAAOrB,SAFC;AAGRS,WAAO;AACLN;AADK;AAHC,GAAD,CAPa;AActBmB,OAAK;AAdiB,CAAxB;;AAiBA9B,KAAK+B,UAAL,CAAgB,YAAY;AAC1BlB,YAAUX,MAAMW,OAAN,CAAcmB,MAAd,EAAV;AACAlB,eAAa;AACXmB,eAAWpB,QAAQH,GAAR;;AAGb;AAJa,GAAb,CAKAF,UAAU0B,OAAV,GAAoBrB,QAAQsB,IAAR,EAApB;AACA3B,YAAU0B,OAAV,CAAkBE,QAAlB,CAA2BpB,QAA3B,EAAqCqB,OAArC,CAA6CC,QAAQC,OAAR,CAAgBlC,cAAcmC,MAAd,CAAqB7B,IAArB,CAAhB,CAA7C;;AAEA;AACAG,aAAWkB,MAAX,GAAoBnB,QAAQsB,IAAR,EAApB;AACArB,aAAWkB,MAAX,CAAkBI,QAAlB,CAA2BlB,SAA3B,EAAsCmB,OAAtC,CAA8CC,QAAQC,OAAR,CAAgB;AAC5DE,aAAU;AAAE,aAAOvB,SAAP;AAAkB;AAD8B,GAAhB,CAA9C;;AAIA;AACAJ,aAAW4B,OAAX,GAAqB7B,QAAQsB,IAAR,EAArB;AACArB,aAAW4B,OAAX,CAAmBN,QAAnB,GAA8BC,OAA9B,CAAsCC,QAAQC,OAAR,CAAgBnC,eAAeuC,GAA/B,CAAtC;AACA7B,aAAW4B,OAAX,CAAmBN,QAAnB,CAA4Bb,aAA5B,EAA2Cc,OAA3C,CAAmDC,QAAQC,OAAR,CAAgBnC,eAAewC,eAAf,CAA+BjC,IAA/B,CAAhB,CAAnD;AACAG,aAAW4B,OAAX,CAAmBN,QAAnB,CAA4BZ,iBAA5B,EAA+Ca,OAA/C,CAAuDC,QAAQC,OAAR,CAAgBnC,eAAeyC,mBAAf,CAAmCjC,IAAnC,EAAyCD,IAAzC,CAAhB,CAAvD;;AAEA,QAAMmC,gBAAgB3C,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMK,SADc;AAEtC,uBAAmB,MAAMM;AAFa,GAAlB,CAAtB;AAIAC,OAAK,MAAM+B,cAAcxC,MAAd,CAAX;AACD,CA3BD;;AA6BAN,KAAK+C,SAAL,CAAe,MAAM;AACnBlC,aAAWX,MAAMW,OAAN,CAAcmC,OAAd,EAAX;AACD,CAFD;;AAIAhD,KAAK,QAAL,EAAeiD,KAAK;AAAA;;AAClBA,IAAEC,MAAF,uBAAS,qCAAGC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoB,6BAApB;AACD,CAFD;;AAIAnD,KAAKoD,MAAL,CAAY,eAAZ,EAA6B,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACtC,MAAII,SAAS,MAAMtC,GAAGoC,MAAH,CAAUnB,MAAV,CAAiBrB,IAAjB,EAAuBO,SAAvB,CAAnB;;AAEA+B,IAAEK,IAAF,yBAAO,gEAAUpB,OAAV,wBAAkBqB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAN,IAAEK,IAAF,yBAAO,gEAAUpB,OAAV,wBAAkBsB,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAP,IAAEK,IAAF,yBAAO,uEAAUpB,OAAV,+BAAkBuB,UAAlB,aAA6B;AAClCxC,uBAAO,EAAEN,IAAF,EAAP;AADkC,GAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEI,wCAFJ;AAGAsC,IAAEK,IAAF,yBAAO,iEAAWtB,MAAX,wBAAkBuB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,kCAAjC;AACAN,IAAEK,IAAF,yBAAO,iEAAWtB,MAAX,wBAAkBwB,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,8BAArC;AACAP,IAAEK,IAAF,yBAAO,wEAAWtB,MAAX,+BAAkByB,UAAlB,aAA6BvC,SAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgD,uCAAhD;;AAEA+B,IAAES,SAAF,CAAYL,MAAZ,EAAoBnC,SAApB,EAA+B,2BAA/B;AACD,CAbD;;AAeAlB,KAAKoD,MAAL,CAAY,wBAAZ,EAAsC,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AAC/C,MAAII,SAAS,MAAMtC,GAAGoC,MAAH,CAAUP,eAAV,CAA0BjC,IAA1B,CAAnB;;AAEAsC,IAAEK,IAAF,yBAAO,iEAAWZ,OAAX,wBAAmBa,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,mCAAlC;AACAN,IAAEK,IAAF,yBAAO,iEAAWZ,OAAX,wBAAmBc,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,+BAAtC;AACAP,IAAEK,IAAF,2BAAO,0EAAWZ,OAAX,+BAAmBe,UAAnB,cAA8BlC,aAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqD,6CAArD;;AAEA0B,IAAES,SAAF,CAAYL,MAAZ,EAAoBjD,eAAewC,eAAf,CAA+BjC,IAA/B,CAApB,EAA0D,2BAA1D;AACD,CARD;;AAUAX,KAAKoD,MAAL,CAAY,4BAAZ,EAA0C,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACnD,MAAII,SAAS,MAAMtC,GAAGoC,MAAH,CAAUN,mBAAV,CAA8BjC,IAA9B,EAAoCD,IAApC,CAAnB;;AAEAsC,IAAEK,IAAF,2BAAO,mEAAWZ,OAAX,wBAAmBa,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,mCAAlC;AACAN,IAAEK,IAAF,2BAAO,mEAAWZ,OAAX,wBAAmBc,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,+BAAtC;AACAP,IAAEK,IAAF,2BAAO,0EAAWZ,OAAX,+BAAmBe,UAAnB,cAA8BjC,iBAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAyD,iDAAzD;;AAEAyB,IAAES,SAAF,CAAYL,MAAZ,EAAoBjD,eAAeyC,mBAAf,CAAmCjC,IAAnC,EAAyCD,IAAzC,CAApB,EAAoE,2BAApE;AACD,CARD","file":"metric-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst metricFixtures = require('./fixtures/metric')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  login: function () {}\n}\n\nlet AgentStub = {\n  hasMany: sinon.spy()\n}\n\nlet uuid = 'yyy-yyy-yyy'\nlet type = 'ram'\nlet sandbox = null\nlet MetricStub = null\nlet db = null\n\nlet uuidArgs = { where: { uuid } }\n\nlet newMetric = {\n  id: 1,\n  type: 'ram',\n  value: '1064',\n  createAt: new Date()\n}\n\nlet agentUuidArgs = {\n  \n}\n\nlet typeAgentUuidArgs = {\n  attributes: [ 'id', 'type', 'value', 'createdAt' ],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[ 'createdAt', 'DESC' ]],\n  include: [{\n    attributes: [],\n    model: AgentStub,\n    where: {\n      uuid\n    }\n  }],\n  raw: true\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Model create stub\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\n    toJSON () { return newMetric }\n  }))\n\n  // Model findAll stub\n  MetricStub.findAll = sandbox.stub()\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all))\n  MetricStub.findAll.withArgs(agentUuidArgs).returns(Promise.resolve(metricFixtures.findByAgentUuid(uuid)))\n  MetricStub.findAll.withArgs(typeAgentUuidArgs).returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuid)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest.serial('Metric#create', async t => {\n  let metric = await db.Metric.create(uuid, newMetric)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(AgentStub.findOne.calledWith({\n    where: { uuid }\n  }), 'findOne should be called with uuidArgs')\n  t.true(MetricStub.create.called, 'create should be called on model')\n  t.true(MetricStub.create.calledOnce, 'create should be called once')\n  t.true(MetricStub.create.calledWith(newMetric), 'create should be called with newAgent')\n\n  t.deepEqual(metric, newMetric, 'metric should be the same')\n})\n\ntest.serial('Metric#findByAgentUuid', async t => {\n  let metric = await db.Metric.findByAgentUuid(uuid)\n\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(MetricStub.findAll.calledWith(agentUuidArgs), 'findAll should be called with agentUuidArgs')\n\n  t.deepEqual(metric, metricFixtures.findByAgentUuid(uuid), 'metric should be the same')\n})\n\ntest.serial('Metric#findByTypeAgentUuid', async t => {\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuid)\n\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(MetricStub.findAll.calledWith(typeAgentUuidArgs), 'findAll should be called with typeAgentUuidArgs')\n\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuid), 'metric should be the same')\n})\n"]}