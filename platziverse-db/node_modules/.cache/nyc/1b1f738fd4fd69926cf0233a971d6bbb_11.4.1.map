{"version":3,"sources":["metric-test.js"],"names":["proxyquire","require","sinon","test","metricFixtures","agentFixtures","uuid","MetricStub","sandbox","db","type","AgentStub","hasMany","spy","newMetric","value","config","logging","uuidArgs","where","metricUuiArgs","attributes","group","include","model","raw","typeUuidArgs","limit","order","beforeEach","create","belongsTo","stub","withArgs","returns","Promise","resolve","toJSON","findByAgentUuid","findUuid","findByTypeAgentUuid","findTypeAgentUuid","findAll","findOne","single","setupDatabase","afterEach","restore","t","truthy","Metric","serial","true","called","calledWith","metric","calledOnce","deepEqual","metrics","is","length"],"mappings":"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","file":"metric-test.js","sourcesContent":["'use strict'\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst test = require('ava')\nconst metricFixtures = require('./fixtures/metric')\nconst agentFixtures = require('./fixtures/agent')\n\nlet uuid = 'yyy-yyy-yyy'\nlet MetricStub = null\nlet sandbox = null\nlet db = null\nlet type = 'app'\nlet AgentStub = {\n  hasMany: sinon.spy()\n}\nlet newMetric = {\n  type: 'CPU',\n  value: '23%'\n}\nlet config = {\n  logging: function () {}\n}\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\nlet metricUuiArgs = {\n  attributes: ['type'],\n  group: ['type'],\n  include: [{\n    model: AgentStub,\n    attributes: [],\n    where: {\n      uuid\n    }\n  }],\n  raw: true\n}\nlet typeUuidArgs = {\n  attributes: ['id', 'type', 'value', 'createdAt'],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [['createdAt', 'DESC']],\n  include: {\n    model: AgentStub,\n    attributes: [],\n    where: {\n      uuid\n    }\n  },\n  raw: true\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Metric create Stub\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs(uuid, newMetric).returns(Promise.resolve(newMetric))\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\n    toJSON () { return newMetric }\n  }))\n\n  // Metric findByAgentUuid Stub\n  MetricStub.findByAgentUuid = sandbox.stub()\n  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metricFixtures.findUuid(uuid)))\n\n  // Metric findByTypeAgentUuid Stub\n  MetricStub.findByTypeAgentUuid = sandbox.stub()\n  MetricStub.findByTypeAgentUuid.withArgs(type, uuid).returns(Promise.resolve(metricFixtures.findTypeAgentUuid(type, uuid)))\n\n  // Metric findAll Stub\n  MetricStub.findAll = sandbox.stub()\n  MetricStub.findAll.withArgs(metricUuiArgs).returns(Promise.resolve(metricFixtures.findUuid(uuid)))\n  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.findTypeAgentUuid(type, uuid)))\n  // Agent findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.single))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('metric', t => {\n  t.truthy(db.Metric, 'metric Services should exist')\n})\n\ntest.serial('setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\n})\n\ntest.serial('Metric#create', async t => {\n  let metric = await db.Metric.create(uuid, newMetric)\n\n  t.true(MetricStub.create.called, 'create should be called at model')\n  t.true(MetricStub.create.calledOnce, 'create Should be called Once')\n  t.true(MetricStub.create.calledWith(newMetric), 'create should be called arguments')\n\n  t.deepEqual(metric, newMetric, 'metric should be the same')\n})\n\ntest.serial('Metric#findByAgentUuid', async t => {\n  let metrics = await db.Metric.findByAgentUuid(uuid)\n\n  t.true(MetricStub.findAll.called, 'findAll should be called')\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called Once')\n  t.true(MetricStub.findAll.calledWith(metricUuiArgs), 'findAll should be with args')\n\n  t.is(metrics.length, metricFixtures.findUuid(uuid).length, 'should be the amount')\n  t.deepEqual(metrics, metricFixtures.findUuid(uuid), 'metrics should be the same')\n})\n\ntest.serial('Metric#findByTypeAgentUuid', async t => {\n  let metrics = await db.Metric.findByTypeAgentUuid(type, uuid)\n\n  t.true(MetricStub.findAll.called, 'findAll should be called')\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called Once')\n  t.true(MetricStub.findAll.calledWith(typeUuidArgs), 'findAll should be with args')\n\n  t.is(metrics.length, metricFixtures.findTypeAgentUuid(type, uuid).length, 'should be with amount')\n\n  t.deepEqual(metrics, metricFixtures.findTypeAgentUuid(type, uuid), 'metrics should be the same')\n})\n"]}