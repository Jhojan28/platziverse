{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,IAAIG,SAAS;AACXC,aAAS,YAAY,CAAE;AADZ,CAAb;AAGA,IAAIC,aAAa;AACbC,eAAWL,MAAMM,GAAN;AADE,CAAjB;AAGA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AACxBD,cAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;AACAJ,gBAAY;AACRK,iBAASH,QAAQH,GAAR;AADD,KAAZ;AAGF,UAAMO,gBAAgBZ,WAAW,KAAX,EAAmB;AACrC,0BAAkB,MAAKM,SADc;AAErC,2BAAmB,MAAKH;AAFa,KAAnB,CAAtB;AAIAI,SAAK,MAAMK,cAAcX,MAAd,CAAX;AACD,CAVD;;AAYAJ,KAAKgB,SAAL,CAAe,MAAI;AACfL,eAAWT,MAAMS,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAjB,KAAK,cAAL,EAAqBkB,KAAK;AAAA;;AACxBA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACD,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAG;AAAA;AAAA;;AACpBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC;AACAL,MAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACH,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nlet config = {\n  logging: function () {}\n}\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n  const setupDatabase = proxyquire('../', Â {\n      './models/agent': ()=> AgentStub,\n      './models/metric': ()=> MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(()=>{\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('make it pass', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t=>{\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n})"]}